{"ast":null,"code":"var _jsxFileName = \"/Users/sydney/Desktop/frontendSaved/src/components/Paragraph.js\",\n  _s = $RefreshSig$();\n// WordButton.js\nimport React, { useState } from \"react\";\nimport axios from \"axios\"; // Ensure axios is imported\nimport WordButton from \"../components/WordButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Paragraph = ({\n  paragraph,\n  id,\n  updateMistakeList,\n  language\n}) => {\n  _s();\n  const [word, setWord] = useState(initialWord);\n  const [isChecked, setIsChecked] = useState(false); // Track checkbox state locally\n\n  const onChange = async () => {\n    setIsChecked(prevChecked => !prevChecked); // Toggle checked state\n\n    const prevWord = word;\n    setWord(\"Loading ...\");\n    try {\n      // fetch translation\n      const response = await axios.get(\"https://languagelearningbackend.onrender.com/translation\", {\n        params: {\n          word: initialWord,\n          sourceLanguage: language\n        }\n      });\n      const translatedWord = response.data.word;\n\n      // Toggle between the original word and the translated word\n      setWord(prevWord === translatedWord ? initialWord : translatedWord);\n      if (!isChecked) {\n        updateMistakeList({\n          word: initialWord,\n          translation: translatedWord\n        });\n      }\n    } catch (error) {\n      console.error(\"There was an error fetching the translation\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"checkbox-button-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: id,\n      className: \"checkbox-button-input\",\n      checked: isChecked // Make checkbox checked based on dictionary state\n      ,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      className: \"checkbox-button-label\",\n      children: word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(Paragraph, \"dYoZnJey0LuV4hVt+Q96epyI2Ro=\");\n_c = Paragraph;\nexport default Paragraph; // Export the component\nvar _c;\n$RefreshReg$(_c, \"Paragraph\");","map":{"version":3,"names":["React","useState","axios","WordButton","jsxDEV","_jsxDEV","Paragraph","paragraph","id","updateMistakeList","language","_s","word","setWord","initialWord","isChecked","setIsChecked","onChange","prevChecked","prevWord","response","get","params","sourceLanguage","translatedWord","data","translation","error","console","className","children","type","checked","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","_c","$RefreshReg$"],"sources":["/Users/sydney/Desktop/frontendSaved/src/components/Paragraph.js"],"sourcesContent":["// WordButton.js\nimport React, { useState } from \"react\";\nimport axios from \"axios\"; // Ensure axios is imported\nimport WordButton from \"../components/WordButton\";\n\nconst Paragraph = ({ paragraph, id, updateMistakeList, language }) => {\n  const [word, setWord] = useState(initialWord);\n  const [isChecked, setIsChecked] = useState(false); // Track checkbox state locally\n\n  const onChange = async () => {\n    setIsChecked((prevChecked) => !prevChecked); // Toggle checked state\n\n    const prevWord = word;\n    setWord(\"Loading ...\");\n    try {\n      // fetch translation\n      const response = await axios.get(\"https://languagelearningbackend.onrender.com/translation\", {\n        params: {\n          word: initialWord,\n          sourceLanguage: language,\n        },\n      });\n\n      const translatedWord = response.data.word;\n\n      // Toggle between the original word and the translated word\n      setWord(prevWord === translatedWord ? initialWord : translatedWord);\n      if (!isChecked) {\n        updateMistakeList({\n          word: initialWord,\n          translation: translatedWord,\n        });\n      }\n    } catch (error) {\n      console.error(\"There was an error fetching the translation\", error);\n    }\n  };\n\n  return (\n    <div className=\"checkbox-button-container\">\n      <input\n        type=\"checkbox\"\n        id={id}\n        className=\"checkbox-button-input\"\n        checked={isChecked} // Make checkbox checked based on dictionary state\n        onChange={onChange}\n      />\n      <label htmlFor={id} className=\"checkbox-button-label\">\n        {word}\n      </label>\n    </div>\n  );\n};\n\nexport default Paragraph; // Export the component\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,SAAS,GAAGA,CAAC;EAAEC,SAAS;EAAEC,EAAE;EAAEC,iBAAiB;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACpE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAACa,WAAW,CAAC;EAC7C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnD,MAAMgB,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3BD,YAAY,CAAEE,WAAW,IAAK,CAACA,WAAW,CAAC,CAAC,CAAC;;IAE7C,MAAMC,QAAQ,GAAGP,IAAI;IACrBC,OAAO,CAAC,aAAa,CAAC;IACtB,IAAI;MACF;MACA,MAAMO,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAAC,0DAA0D,EAAE;QAC3FC,MAAM,EAAE;UACNV,IAAI,EAAEE,WAAW;UACjBS,cAAc,EAAEb;QAClB;MACF,CAAC,CAAC;MAEF,MAAMc,cAAc,GAAGJ,QAAQ,CAACK,IAAI,CAACb,IAAI;;MAEzC;MACAC,OAAO,CAACM,QAAQ,KAAKK,cAAc,GAAGV,WAAW,GAAGU,cAAc,CAAC;MACnE,IAAI,CAACT,SAAS,EAAE;QACdN,iBAAiB,CAAC;UAChBG,IAAI,EAAEE,WAAW;UACjBY,WAAW,EAAEF;QACf,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACrE;EACF,CAAC;EAED,oBACEtB,OAAA;IAAKwB,SAAS,EAAC,2BAA2B;IAAAC,QAAA,gBACxCzB,OAAA;MACE0B,IAAI,EAAC,UAAU;MACfvB,EAAE,EAAEA,EAAG;MACPqB,SAAS,EAAC,uBAAuB;MACjCG,OAAO,EAAEjB,SAAU,CAAC;MAAA;MACpBE,QAAQ,EAAEA;IAAS;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC,eACF/B,OAAA;MAAOgC,OAAO,EAAE7B,EAAG;MAACqB,SAAS,EAAC,uBAAuB;MAAAC,QAAA,EAClDlB;IAAI;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACzB,EAAA,CA/CIL,SAAS;AAAAgC,EAAA,GAAThC,SAAS;AAiDf,eAAeA,SAAS,CAAC,CAAC;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}