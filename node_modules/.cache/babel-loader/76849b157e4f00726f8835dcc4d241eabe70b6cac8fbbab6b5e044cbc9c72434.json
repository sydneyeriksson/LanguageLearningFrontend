{"ast":null,"code":"var _jsxFileName = \"/Users/sydney/Desktop/CS_Home_Projects/simpleApp/frontend/src/components/bookPage.js\",\n  _s = $RefreshSig$();\nimport { React, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport WordButton from \"../components/WordButton\";\nimport PageTurn from \"../images/PageTurn.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookPage = ({\n  title,\n  pageNum,\n  language,\n  difficulty,\n  temporaryMistakeList,\n  setPageNum,\n  handleNextPage\n}) => {\n  _s();\n  const [page, setPage] = useState([]);\n\n  // Get the page from the backend\n  useEffect(() => {\n    setPage([]);\n    axios.get(\"http://127.0.0.1:5000/book\", {\n      params: {\n        pageNum: pageNum,\n        title: title,\n        difficulty: difficulty,\n        language: language\n      }\n    }).then(response => {\n      setPage(response.data.page);\n    }).catch(error => {\n      console.error(\"There was an error fetching the page!\", error);\n    });\n  }, [title, pageNum, language, difficulty]);\n  const updateMistakeList = mistake => {\n    temporaryMistakeList.current.push(mistake);\n  };\n  const incrementPage = () => {\n    setPageNum(prevPageNum => {\n      const newPageNum = Math.min(prevPageNum + 1, 1000); // Increment but limit to 1000\n      handleNextPage(newPageNum); // Ensure the function is called with the updated page number\n      return newPageNum;\n    });\n  };\n  const decrementPage = () => {\n    setPageNum(prevPageNum => {\n      const newPageNum = Math.max(prevPageNum - 1, 1); // Decrement but limit to 1\n      handleNextPage(newPageNum); // Ensure the function is called with the updated page number\n      return newPageNum;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: \"red\",\n      width: \"\",\n      height: 100\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(BookPage, \"Yw4fZpmR9EK3e2rWuzoHaXNFDDM=\");\n_c = BookPage;\nexport default BookPage; // Export the component\nvar _c;\n$RefreshReg$(_c, \"BookPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","WordButton","PageTurn","jsxDEV","_jsxDEV","BookPage","title","pageNum","language","difficulty","temporaryMistakeList","setPageNum","handleNextPage","_s","page","setPage","get","params","then","response","data","catch","error","console","updateMistakeList","mistake","current","push","incrementPage","prevPageNum","newPageNum","Math","min","decrementPage","max","style","backgroundColor","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sydney/Desktop/CS_Home_Projects/simpleApp/frontend/src/components/bookPage.js"],"sourcesContent":["import { React, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport WordButton from \"../components/WordButton\";\nimport PageTurn from \"../images/PageTurn.png\";\n\nconst BookPage = ({\n  title,\n  pageNum,\n  language,\n  difficulty,\n  temporaryMistakeList,\n  setPageNum,\n  handleNextPage,\n}) => {\n  const [page, setPage] = useState([]);\n\n  // Get the page from the backend\n  useEffect(() => {\n    setPage([]);\n    axios\n      .get(\"http://127.0.0.1:5000/book\", {\n        params: {\n          pageNum: pageNum,\n          title: title,\n          difficulty: difficulty,\n          language: language,\n        },\n      })\n      .then((response) => {\n        setPage(response.data.page);\n      })\n      .catch((error) => {\n        console.error(\"There was an error fetching the page!\", error);\n      });\n  }, [title, pageNum, language, difficulty]);\n\n  const updateMistakeList = (mistake) => {\n    temporaryMistakeList.current.push(mistake);\n  };\n\n  const incrementPage = () => {\n    setPageNum((prevPageNum) => {\n      const newPageNum = Math.min(prevPageNum + 1, 1000); // Increment but limit to 1000\n      handleNextPage(newPageNum); // Ensure the function is called with the updated page number\n      return newPageNum;\n    });\n  };\n\n  const decrementPage = () => {\n    setPageNum((prevPageNum) => {\n      const newPageNum = Math.max(prevPageNum - 1, 1); // Decrement but limit to 1\n      handleNextPage(newPageNum); // Ensure the function is called with the updated page number\n      return newPageNum;\n    });\n  };\n\n  return (\n    <div style={{ backgroundColor: \"red\", width: \"\", height:100 }}>\n      {/* <div class=\"page\">\n        {page.length > 1 ? (\n          page.map((item, index) => (\n            <WordButton\n              initialWord={item}\n              id={index}\n              updateMistakeList={updateMistakeList}\n            />\n          ))\n        ) : (\n          <WordButton\n            initialWord={\"Loading ...\"}\n            id={1}\n            updateMistakeList={updateMistakeList}\n          />\n        )}\n        <div style={{ width: \"100%\", height: 50 }}></div>\n      </div> */}\n      {/* <div class=\"page\">\n        {page.length > 1 ? (\n          page.map((item, index) => (\n            <WordButton\n              initialWord={item}\n              id={index}\n              updateMistakeList={updateMistakeList}\n            />\n          ))\n        ) : (\n          <WordButton\n            initialWord={\"Loading ...\"}\n            id={1}\n            updateMistakeList={updateMistakeList}\n          />\n        )}\n        <div style={{ width: \"100%\", height: 50 }}></div>\n      </div>\n      <div class=\"PageTurnLeftContainer\">\n        <div class=\"PageBeneathLeft\"></div>\n        <img\n          class=\"PageTurnLeft\"\n          src={PageTurn}\n          alt=\"PageTurnLeft\"\n          onClick={() => decrementPage()}\n        />\n      </div>\n      <div class=\"PageTurnContainer\">\n        <div class=\"PageBeneath\"></div>\n        <img\n          class=\"PageTurn\"\n          src={PageTurn}\n          alt=\"PageTurn\"\n          onClick={() => incrementPage()}\n        />\n      </div> */}\n    </div>\n  );\n};\n\nexport default BookPage; // Export the component\n"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,QAAQ,GAAGA,CAAC;EAChBC,KAAK;EACLC,OAAO;EACPC,QAAQ;EACRC,UAAU;EACVC,oBAAoB;EACpBC,UAAU;EACVC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACAC,SAAS,CAAC,MAAM;IACdgB,OAAO,CAAC,EAAE,CAAC;IACXf,KAAK,CACFgB,GAAG,CAAC,4BAA4B,EAAE;MACjCC,MAAM,EAAE;QACNV,OAAO,EAAEA,OAAO;QAChBD,KAAK,EAAEA,KAAK;QACZG,UAAU,EAAEA,UAAU;QACtBD,QAAQ,EAAEA;MACZ;IACF,CAAC,CAAC,CACDU,IAAI,CAAEC,QAAQ,IAAK;MAClBJ,OAAO,CAACI,QAAQ,CAACC,IAAI,CAACN,IAAI,CAAC;IAC7B,CAAC,CAAC,CACDO,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC/D,CAAC,CAAC;EACN,CAAC,EAAE,CAAChB,KAAK,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,UAAU,CAAC,CAAC;EAE1C,MAAMe,iBAAiB,GAAIC,OAAO,IAAK;IACrCf,oBAAoB,CAACgB,OAAO,CAACC,IAAI,CAACF,OAAO,CAAC;EAC5C,CAAC;EAED,MAAMG,aAAa,GAAGA,CAAA,KAAM;IAC1BjB,UAAU,CAAEkB,WAAW,IAAK;MAC1B,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACH,WAAW,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACpDjB,cAAc,CAACkB,UAAU,CAAC,CAAC,CAAC;MAC5B,OAAOA,UAAU;IACnB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMG,aAAa,GAAGA,CAAA,KAAM;IAC1BtB,UAAU,CAAEkB,WAAW,IAAK;MAC1B,MAAMC,UAAU,GAAGC,IAAI,CAACG,GAAG,CAACL,WAAW,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACjDjB,cAAc,CAACkB,UAAU,CAAC,CAAC,CAAC;MAC5B,OAAOA,UAAU;IACnB,CAAC,CAAC;EACJ,CAAC;EAED,oBACE1B,OAAA;IAAK+B,KAAK,EAAE;MAAEC,eAAe,EAAE,KAAK;MAAEC,KAAK,EAAE,EAAE;MAAEC,MAAM,EAAC;IAAI;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAuDzD,CAAC;AAEV,CAAC;AAAC7B,EAAA,CA7GIR,QAAQ;AAAAsC,EAAA,GAARtC,QAAQ;AA+Gd,eAAeA,QAAQ,CAAC,CAAC;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}