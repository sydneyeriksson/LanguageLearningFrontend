{"ast":null,"code":"var _jsxFileName = \"/Users/sydney/Desktop/CS_Home_Projects/simpleApp/frontend/src/components/wordButton.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function wordButton({\n  initialWord,\n  id,\n  language,\n  updateMistakeList\n}) {\n  _s();\n  const [word, setWord] = useState(initialWord);\n  const [isChecked, setIsChecked] = useState(false); // Track checkbox state locally\n\n  const onChange = async () => {\n    setIsChecked(prevChecked => !prevChecked); // Toggle checked state\n\n    const prevWord = word;\n    setWord(\"Loading ...\");\n    try {\n      // fetch translation\n      const response = await axios.get(\"http://127.0.0.1:5000/translation\", {\n        params: {\n          word: initialWord,\n          sourceLanguage: language\n        }\n      });\n      const translatedWord = response.data.word;\n\n      // Toggle between the original word and the translated word\n      setWord(prevWord === translatedWord ? initialWord : translatedWord);\n      updateMistakeList({\n        word: initialWord,\n        translation: translatedWord\n      });\n      // setWordDictionary((prev) => [\n      //   ...prev, // Spread the existing items\n      //   { word: initialWord, translation: translatedWord }, // Add the new word object\n      // ]);\n    } catch (error) {\n      console.error(\"There was an error fetching the translation\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"checkbox-button-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: id,\n      className: \"checkbox-button-input\",\n      checked: isChecked // Make checkbox checked based on dictionary state\n      ,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      className: \"checkbox-button-label\",\n      children: word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 11\n  }, this);\n}\n_s(wordButton, \"dYoZnJey0LuV4hVt+Q96epyI2Ro=\");\n;","map":{"version":3,"names":["wordButton","initialWord","id","language","updateMistakeList","_s","word","setWord","useState","isChecked","setIsChecked","onChange","prevChecked","prevWord","response","axios","get","params","sourceLanguage","translatedWord","data","translation","error","console","_jsxDEV","className","children","type","checked","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor"],"sources":["/Users/sydney/Desktop/CS_Home_Projects/simpleApp/frontend/src/components/wordButton.js"],"sourcesContent":["export default function wordButton ({ initialWord, id, language, updateMistakeList }) {\n        const [word, setWord] = useState(initialWord);\n        const [isChecked, setIsChecked] = useState(false); // Track checkbox state locally\n    \n        const onChange = async () => {\n          setIsChecked((prevChecked) => !prevChecked); // Toggle checked state\n    \n          const prevWord = word;\n          setWord(\"Loading ...\");\n          try {\n            // fetch translation\n            const response = await axios.get(\"http://127.0.0.1:5000/translation\", {\n              params: {\n                word: initialWord,\n                sourceLanguage: language,\n              },\n            });\n    \n            const translatedWord = response.data.word;\n    \n            // Toggle between the original word and the translated word\n            setWord(prevWord === translatedWord ? initialWord : translatedWord);\n    \n            updateMistakeList({\n              word: initialWord,\n              translation: translatedWord,\n            });\n            // setWordDictionary((prev) => [\n            //   ...prev, // Spread the existing items\n            //   { word: initialWord, translation: translatedWord }, // Add the new word object\n            // ]);\n          } catch (error) {\n            console.error(\"There was an error fetching the translation\", error);\n          }\n        };\n    \n        return (\n          <div className=\"checkbox-button-container\">\n            <input\n              type=\"checkbox\"\n              id={id}\n              className=\"checkbox-button-input\"\n              checked={isChecked} // Make checkbox checked based on dictionary state\n              onChange={onChange}\n            />\n            <label htmlFor={id} className=\"checkbox-button-label\">\n              {word}\n            </label>\n          </div>\n        );\n      };"],"mappings":";;;AAAA,eAAe,SAASA,UAAUA,CAAE;EAAEC,WAAW;EAAEC,EAAE;EAAEC,QAAQ;EAAEC;AAAkB,CAAC,EAAE;EAAAC,EAAA;EAC9E,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAACP,WAAW,CAAC;EAC7C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGF,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnD,MAAMG,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3BD,YAAY,CAAEE,WAAW,IAAK,CAACA,WAAW,CAAC,CAAC,CAAC;;IAE7C,MAAMC,QAAQ,GAAGP,IAAI;IACrBC,OAAO,CAAC,aAAa,CAAC;IACtB,IAAI;MACF;MACA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAC,mCAAmC,EAAE;QACpEC,MAAM,EAAE;UACNX,IAAI,EAAEL,WAAW;UACjBiB,cAAc,EAAEf;QAClB;MACF,CAAC,CAAC;MAEF,MAAMgB,cAAc,GAAGL,QAAQ,CAACM,IAAI,CAACd,IAAI;;MAEzC;MACAC,OAAO,CAACM,QAAQ,KAAKM,cAAc,GAAGlB,WAAW,GAAGkB,cAAc,CAAC;MAEnEf,iBAAiB,CAAC;QAChBE,IAAI,EAAEL,WAAW;QACjBoB,WAAW,EAAEF;MACf,CAAC,CAAC;MACF;MACA;MACA;MACA;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACrE;EACF,CAAC;EAED,oBACEE,OAAA;IAAKC,SAAS,EAAC,2BAA2B;IAAAC,QAAA,gBACxCF,OAAA;MACEG,IAAI,EAAC,UAAU;MACfzB,EAAE,EAAEA,EAAG;MACPuB,SAAS,EAAC,uBAAuB;MACjCG,OAAO,EAAEnB,SAAU,CAAC;MAAA;MACpBE,QAAQ,EAAEA;IAAS;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC,eACFR,OAAA;MAAOS,OAAO,EAAE/B,EAAG;MAACuB,SAAS,EAAC,uBAAuB;MAAAC,QAAA,EAClDpB;IAAI;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAAC3B,EAAA,CAlDiBL,UAAU;AAkD3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}