{"ast":null,"code":"var _jsxFileName = \"/Users/sydney/Desktop/frontendSaved/src/components/Paragraph.js\",\n  _s = $RefreshSig$();\n// WordButton.js\nimport React, { useState } from \"react\";\nimport axios from \"axios\"; // Ensure axios is imported\nimport WordButton from \"../components/WordButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Paragraph = ({\n  initialWord,\n  id,\n  updateMistakeList,\n  language\n}) => {\n  _s();\n  const [word, setWord] = useState(initialWord);\n  const [isChecked, setIsChecked] = useState(false); // Track checkbox state locally\n\n  const onChange = async () => {\n    setIsChecked(prevChecked => !prevChecked); // Toggle checked state\n\n    const prevWord = word;\n    setWord(\"Loading ...\");\n    try {\n      // fetch translation\n      const response = await axios.get(\"https://languagelearningbackend.onrender.com/translation\", {\n        params: {\n          word: initialWord,\n          sourceLanguage: language\n        }\n      });\n      const translatedWord = response.data.word;\n\n      // Toggle between the original word and the translated word\n      setWord(prevWord === translatedWord ? initialWord : translatedWord);\n      if (!isChecked) {\n        updateMistakeList({\n          word: initialWord,\n          translation: translatedWord\n        });\n      }\n    } catch (error) {\n      console.error(\"There was an error fetching the translation\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"paragraph-container\",\n    children: /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      className: \"checkbox-button-label\",\n      children: word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(Paragraph, \"dYoZnJey0LuV4hVt+Q96epyI2Ro=\");\n_c = Paragraph;\nexport default Paragraph; // Export the component\nvar _c;\n$RefreshReg$(_c, \"Paragraph\");","map":{"version":3,"names":["React","useState","axios","WordButton","jsxDEV","_jsxDEV","Paragraph","initialWord","id","updateMistakeList","language","_s","word","setWord","isChecked","setIsChecked","onChange","prevChecked","prevWord","response","get","params","sourceLanguage","translatedWord","data","translation","error","console","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sydney/Desktop/frontendSaved/src/components/Paragraph.js"],"sourcesContent":["// WordButton.js\nimport React, { useState } from \"react\";\nimport axios from \"axios\"; // Ensure axios is imported\nimport WordButton from \"../components/WordButton\";\n\nconst Paragraph = ({ initialWord, id, updateMistakeList, language }) => {\n  const [word, setWord] = useState(initialWord);\n  const [isChecked, setIsChecked] = useState(false); // Track checkbox state locally\n\n  const onChange = async () => {\n    setIsChecked((prevChecked) => !prevChecked); // Toggle checked state\n\n    const prevWord = word;\n    setWord(\"Loading ...\");\n    try {\n      // fetch translation\n      const response = await axios.get(\n        \"https://languagelearningbackend.onrender.com/translation\",\n        {\n          params: {\n            word: initialWord,\n            sourceLanguage: language,\n          },\n        }\n      );\n\n      const translatedWord = response.data.word;\n\n      // Toggle between the original word and the translated word\n      setWord(prevWord === translatedWord ? initialWord : translatedWord);\n      if (!isChecked) {\n        updateMistakeList({\n          word: initialWord,\n          translation: translatedWord,\n        });\n      }\n    } catch (error) {\n      console.error(\"There was an error fetching the translation\", error);\n    }\n  };\n\n  return (\n    <div className=\"paragraph-container\">\n      <label htmlFor={id} className=\"checkbox-button-label\">\n        {word}\n      </label>\n    </div>\n  );\n};\n\nexport default Paragraph; // Export the component\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,SAAS,GAAGA,CAAC;EAAEC,WAAW;EAAEC,EAAE;EAAEC,iBAAiB;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAACM,WAAW,CAAC;EAC7C,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnD,MAAMe,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3BD,YAAY,CAAEE,WAAW,IAAK,CAACA,WAAW,CAAC,CAAC,CAAC;;IAE7C,MAAMC,QAAQ,GAAGN,IAAI;IACrBC,OAAO,CAAC,aAAa,CAAC;IACtB,IAAI;MACF;MACA,MAAMM,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAC9B,0DAA0D,EAC1D;QACEC,MAAM,EAAE;UACNT,IAAI,EAAEL,WAAW;UACjBe,cAAc,EAAEZ;QAClB;MACF,CACF,CAAC;MAED,MAAMa,cAAc,GAAGJ,QAAQ,CAACK,IAAI,CAACZ,IAAI;;MAEzC;MACAC,OAAO,CAACK,QAAQ,KAAKK,cAAc,GAAGhB,WAAW,GAAGgB,cAAc,CAAC;MACnE,IAAI,CAACT,SAAS,EAAE;QACdL,iBAAiB,CAAC;UAChBG,IAAI,EAAEL,WAAW;UACjBkB,WAAW,EAAEF;QACf,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACrE;EACF,CAAC;EAED,oBACErB,OAAA;IAAKuB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,eAClCxB,OAAA;MAAOyB,OAAO,EAAEtB,EAAG;MAACoB,SAAS,EAAC,uBAAuB;MAAAC,QAAA,EAClDjB;IAAI;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACvB,EAAA,CA3CIL,SAAS;AAAA6B,EAAA,GAAT7B,SAAS;AA6Cf,eAAeA,SAAS,CAAC,CAAC;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}