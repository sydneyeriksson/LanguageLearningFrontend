{"ast":null,"code":"import contentReturnBookshelfCat from\"../images/contentReturnCat.png\";import happyReturnBookshelfCat from\"../images/happyReturnCat.png\";import{useState,useEffect}from\"react\";import{useNavigate,useLocation}from\"react-router-dom\";import\"../css/FlashCards.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function FlashCards(){var _location$state;const navigate=useNavigate();// Hook for navigation\n// Show the first card from the deck in the original language, and content cat\nconst[index,setIndex]=useState(0);const[showTranslation,setShowTranslation]=useState(false);const[currentCat,setCurrentCat]=useState(contentReturnBookshelfCat);// Get the word list from the home page\nconst location=useLocation();const mistakeList=((_location$state=location.state)===null||_location$state===void 0?void 0:_location$state.mistakeList)||[];// Reload the page when the index or mistakeList changes\nuseEffect(()=>{},[index]);const removeWord=()=>{const currentIndex=index;// If on the last card of the deck switch to the first card\nif(index===mistakeList.length-1){setIndex(0);}// Remove 1 item at the specified index\nmistakeList.splice(currentIndex,1);// Make the cat happy for 2 seconds\nsetCurrentCat(happyReturnBookshelfCat);setTimeout(function(){setCurrentCat(contentReturnBookshelfCat);},2000);};const handlePreviousCard=()=>{// If current card is not the first card, go to the previous card, otherwise go to last card in deck\nsetIndex(prevIndex=>(prevIndex-1+mistakeList.length)%mistakeList.length);};const handleNextCard=()=>{// If current card is not the last card, go to the next card, otherwise go to first card in deck\nsetIndex(prevIndex=>(prevIndex+1)%mistakeList.length);};const handleFlipCard=()=>{setShowTranslation(!showTranslation);};const handleReturnToShelf=()=>{navigate(\"/\",{state:{mistakeList:mistakeList}});// Navigate to the book shelf\n};const currentCard=mistakeList[index];return/*#__PURE__*/_jsxs(\"div\",{class:\"background\",children:[/*#__PURE__*/_jsx(\"div\",{class:\"catChair\"}),/*#__PURE__*/_jsx(\"img\",{class:\"contentReturnBookshelfCat\",src:mistakeList.length<1?happyReturnBookshelfCat:currentCat,onClick:handleReturnToShelf,alt:\"\"}),/*#__PURE__*/_jsxs(\"div\",{class:\"flashCardButtonsContainer\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"flashCard\",onClick:handleFlipCard,children:mistakeList.length<1?\"All Done!\":showTranslation?currentCard.translation:currentCard.word}),/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",flexDirection:\"row\"},children:[/*#__PURE__*/_jsx(\"div\",{class:\"changeCardButton\",onClick:()=>handlePreviousCard(),children:\"\\u2190\"}),/*#__PURE__*/_jsx(\"div\",{class:\"changeCardButton\",onClick:()=>handleNextCard(),children:\"\\u2192\"})]}),/*#__PURE__*/_jsx(\"div\",{class:\"changeCardButton\",onClick:()=>removeWord(),children:\"Memorized!\"})]})]});}export default FlashCards;","map":{"version":3,"names":["contentReturnBookshelfCat","happyReturnBookshelfCat","useState","useEffect","useNavigate","useLocation","jsx","_jsx","jsxs","_jsxs","FlashCards","_location$state","navigate","index","setIndex","showTranslation","setShowTranslation","currentCat","setCurrentCat","location","mistakeList","state","removeWord","currentIndex","length","splice","setTimeout","handlePreviousCard","prevIndex","handleNextCard","handleFlipCard","handleReturnToShelf","currentCard","class","children","src","onClick","alt","className","translation","word","style","display","flexDirection"],"sources":["/Users/sydney/Desktop/frontendSaved/src/pages/FlashCards.js"],"sourcesContent":["import contentReturnBookshelfCat from \"../images/contentReturnCat.png\";\nimport happyReturnBookshelfCat from \"../images/happyReturnCat.png\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport \"../css/FlashCards.css\";\n\nfunction FlashCards() {\n  const navigate = useNavigate(); // Hook for navigation\n\n  // Show the first card from the deck in the original language, and content cat\n  const [index, setIndex] = useState(0);\n  const [showTranslation, setShowTranslation] = useState(false);\n  const [currentCat, setCurrentCat] = useState(contentReturnBookshelfCat);\n\n  // Get the word list from the home page\n  const location = useLocation();\n  const mistakeList = location.state?.mistakeList || [];\n\n  // Reload the page when the index or mistakeList changes\n  useEffect(() => {}, [index]);\n\n  const removeWord = () => {\n    const currentIndex = index;\n\n    // If on the last card of the deck switch to the first card\n    if (index === mistakeList.length - 1) {\n      setIndex(0);\n    }\n\n    // Remove 1 item at the specified index\n    mistakeList.splice(currentIndex, 1);\n\n    // Make the cat happy for 2 seconds\n    setCurrentCat(happyReturnBookshelfCat);\n    setTimeout(function () {\n      setCurrentCat(contentReturnBookshelfCat);\n    }, 2000);\n  };\n\n  const handlePreviousCard = () => {\n    // If current card is not the first card, go to the previous card, otherwise go to last card in deck\n    setIndex(\n      (prevIndex) => (prevIndex - 1 + mistakeList.length) % mistakeList.length\n    );\n  };\n\n  const handleNextCard = () => {\n    // If current card is not the last card, go to the next card, otherwise go to first card in deck\n    setIndex((prevIndex) => (prevIndex + 1) % mistakeList.length);\n  };\n\n  const handleFlipCard = () => {\n    setShowTranslation(!showTranslation);\n  };\n\n  const handleReturnToShelf = () => {\n    navigate(\"/\", {\n      state: { mistakeList: mistakeList },\n    }); // Navigate to the book shelf\n  };\n\n  const currentCard = mistakeList[index];\n\n  return (\n    <div class=\"background\">\n      <div class=\"catChair\"></div>\n      <img\n        class=\"contentReturnBookshelfCat\"\n        src={mistakeList.length < 1 ? happyReturnBookshelfCat : currentCat}\n        onClick={handleReturnToShelf}\n        alt=\"\"\n      />\n      <div class=\"flashCardButtonsContainer\">\n        <div className=\"flashCard\" onClick={handleFlipCard}>\n          {mistakeList.length < 1\n            ? \"All Done!\"\n            : showTranslation\n            ? currentCard.translation\n            : currentCard.word}\n        </div>\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n          <div class=\"changeCardButton\" onClick={() => handlePreviousCard()}>\n            {/* left arrow */}\n            &#x2190;\n          </div>\n          <div class=\"changeCardButton\" onClick={() => handleNextCard()}>\n            {/* right arrow */}\n            &#x2192;\n          </div>\n        </div>\n        <div class=\"changeCardButton\" onClick={() => removeWord()}>\n          Memorized!\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default FlashCards;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}