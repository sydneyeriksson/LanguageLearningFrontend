{"ast":null,"code":"var _jsxFileName = \"/Users/sydney/Desktop/CS_Home_Projects/simpleApp/frontend/src/components/WordButton.js\",\n  _s = $RefreshSig$();\n// WordButton.js\nimport React, { useState } from \"react\";\nimport axios from \"axios\"; // Ensure axios is imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordButton = ({\n  initialWord,\n  id,\n  updateMistakeList\n}) => {\n  _s();\n  const [word, setWord] = useState(initialWord);\n  const [isChecked, setIsChecked] = useState(false); // Track checkbox state locally\n\n  const onChange = async () => {\n    setIsChecked(prevChecked => !prevChecked); // Toggle checked state\n\n    const prevWord = word;\n    setWord(\"Loading ...\");\n    try {\n      // fetch translation\n      const response = await axios.get(\"http://127.0.0.1:5000/translation\", {\n        params: {\n          word: initialWord\n        }\n      });\n      const translatedWord = response.data.word;\n\n      // Toggle between the original word and the translated word\n      setWord(prevWord === translatedWord ? initialWord : translatedWord);\n      if (!isChecked) updateMistakeList({\n        word: initialWord,\n        translation: translatedWord\n      });\n      // setWordDictionary((prev) => [\n      //   ...prev, // Spread the existing items\n      //   { word: initialWord, translation: translatedWord }, // Add the new word object\n      // ]);\n    } catch (error) {\n      console.error(\"There was an error fetching the translation\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"checkbox-button-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: id,\n      className: \"checkbox-button-input\",\n      checked: isChecked // Make checkbox checked based on dictionary state\n      ,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      className: \"checkbox-button-label\",\n      children: word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(WordButton, \"dYoZnJey0LuV4hVt+Q96epyI2Ro=\");\n_c = WordButton;\nexport default WordButton; // Export the component\nvar _c;\n$RefreshReg$(_c, \"WordButton\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","WordButton","initialWord","id","updateMistakeList","_s","word","setWord","isChecked","setIsChecked","onChange","prevChecked","prevWord","response","get","params","translatedWord","data","translation","error","console","className","children","type","checked","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","_c","$RefreshReg$"],"sources":["/Users/sydney/Desktop/CS_Home_Projects/simpleApp/frontend/src/components/WordButton.js"],"sourcesContent":["// WordButton.js\nimport React, { useState } from \"react\";\nimport axios from \"axios\"; // Ensure axios is imported\n\nconst WordButton = ({ initialWord, id, updateMistakeList }) => {\n  const [word, setWord] = useState(initialWord);\n  const [isChecked, setIsChecked] = useState(false); // Track checkbox state locally\n\n  const onChange = async () => {\n    setIsChecked((prevChecked) => !prevChecked); // Toggle checked state\n\n    const prevWord = word;\n    setWord(\"Loading ...\");\n    try {\n      // fetch translation\n      const response = await axios.get(\"http://127.0.0.1:5000/translation\", {\n        params: {\n          word: initialWord,\n        },\n      });\n\n      const translatedWord = response.data.word;\n\n      // Toggle between the original word and the translated word\n      setWord(prevWord === translatedWord ? initialWord : translatedWord);\n      if (!isChecked)\n      updateMistakeList({\n        word: initialWord,\n        translation: translatedWord,\n      });\n      // setWordDictionary((prev) => [\n      //   ...prev, // Spread the existing items\n      //   { word: initialWord, translation: translatedWord }, // Add the new word object\n      // ]);\n    } catch (error) {\n      console.error(\"There was an error fetching the translation\", error);\n    }\n  };\n\n  return (\n    <div className=\"checkbox-button-container\">\n      <input\n        type=\"checkbox\"\n        id={id}\n        className=\"checkbox-button-input\"\n        checked={isChecked} // Make checkbox checked based on dictionary state\n        onChange={onChange}\n      />\n      <label htmlFor={id} className=\"checkbox-button-label\">\n        {word}\n      </label>\n    </div>\n  );\n};\n\nexport default WordButton; // Export the component\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,UAAU,GAAGA,CAAC;EAAEC,WAAW;EAAEC,EAAE;EAAEC;AAAkB,CAAC,KAAK;EAAAC,EAAA;EAC7D,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAACK,WAAW,CAAC;EAC7C,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnD,MAAMa,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3BD,YAAY,CAAEE,WAAW,IAAK,CAACA,WAAW,CAAC,CAAC,CAAC;;IAE7C,MAAMC,QAAQ,GAAGN,IAAI;IACrBC,OAAO,CAAC,aAAa,CAAC;IACtB,IAAI;MACF;MACA,MAAMM,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAC,mCAAmC,EAAE;QACpEC,MAAM,EAAE;UACNT,IAAI,EAAEJ;QACR;MACF,CAAC,CAAC;MAEF,MAAMc,cAAc,GAAGH,QAAQ,CAACI,IAAI,CAACX,IAAI;;MAEzC;MACAC,OAAO,CAACK,QAAQ,KAAKI,cAAc,GAAGd,WAAW,GAAGc,cAAc,CAAC;MACnE,IAAI,CAACR,SAAS,EACdJ,iBAAiB,CAAC;QAChBE,IAAI,EAAEJ,WAAW;QACjBgB,WAAW,EAAEF;MACf,CAAC,CAAC;MACF;MACA;MACA;MACA;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACrE;EACF,CAAC;EAED,oBACEnB,OAAA;IAAKqB,SAAS,EAAC,2BAA2B;IAAAC,QAAA,gBACxCtB,OAAA;MACEuB,IAAI,EAAC,UAAU;MACfpB,EAAE,EAAEA,EAAG;MACPkB,SAAS,EAAC,uBAAuB;MACjCG,OAAO,EAAEhB,SAAU,CAAC;MAAA;MACpBE,QAAQ,EAAEA;IAAS;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC,eACF5B,OAAA;MAAO6B,OAAO,EAAE1B,EAAG;MAACkB,SAAS,EAAC,uBAAuB;MAAAC,QAAA,EAClDhB;IAAI;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACvB,EAAA,CAjDIJ,UAAU;AAAA6B,EAAA,GAAV7B,UAAU;AAmDhB,eAAeA,UAAU,CAAC,CAAC;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}